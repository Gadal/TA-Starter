swagger: '2.0'
info:
  version: '1.0.0'
  title: DCS Applicants
  description: sample API that illustrates a basic way Applicants could shared between webapps.
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: Mathew Zaleski
    email: matz@cs.toronto.edu
    url: http://localhost:8080
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: localhost
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
definitions:
  Applicant:
    type: object
    required:
      - id
      - studentnumber
      - familyname
      - givenname
      - program
      - year
      - tacourses
      - courses
      - phonenumber
      - emailaddress
      - workstatus
      - workstatusexplain
      - studentdepartment
      - studentdepartmentexplain
      - dateofapplication
    properties:
      id:
        type: integer
      studentnumber:
        type: integer
      familyname:
        type: string
      givenname:
        type: string
      program:
        type: string
      year:
        type: integer
      tacourses:
        type: string
      courses:
        type: string
      phonenumber:
        type: string
      emailaddress:
        type: string
      workstatus:
        type: string
      workstatusexplain:
        type: string
      studentdepartment:
        type: string
      studentdepartmentexplain:
        type: string
      dateofapplication:
        type: string

#for post.. hence like applicant but without the id field (as that is set by system)
  newApplicant:
    type: object
    required:
      - studentnumber
      - familyname
      - givenname
      - program
      - year
      - tacourses
      - courses
      - phonenumber
      - emailaddress
      - workstatus
      - workstatusexplain
      - studentdepartment
      - studentdepartmentexplain
      - dateofapplication
    properties:
      studentnumber:
        type: integer
      familyname:
        type: string
      givenname:
        type: string
      program:
        type: string
      year:
        type: integer
      tacourses:
        type: string
      courses:
        type: string
      phonenumber:
        type: string
      emailaddress:
        type: string
      workstatus:
        type: string
      workstatusexplain:
        type: string
      studentdepartment:
        type: string
      studentdepartmentexplain:
        type: string
      dateofapplication:
        type: string
        
  errorModel:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
paths:
  /applicants:
    get:
      description: Returns all applicants that match name
      operationId: findApplicant
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: surname
          in: query
          description: surname to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: csv
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: applicant response
          schema:
            type: array
            items:
              $ref: '#/definitions/Applicant'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    post:
      description: Creates a new applicant.  Duplicates are NOT allowed
      operationId: addApplicant
      produces:
        - application/json
      parameters:
        - name: applicant
          in: body
          description: applicant to add 
          required: true
          schema:
            $ref: '#/definitions/newApplicant'
      responses:
        '200':
          description: applicant response
          schema:
            $ref: '#/definitions/Applicant'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
  /applicants/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: findApplicantById
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: id
          in: path
          description: ID of applicant to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Applicant response
          schema:
            $ref: '#/definitions/Applicant'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: deletes a single Applicant based on the ID supplied
      operationId: deleteApplicant
      parameters:
        - name: id
          in: path
          description: ID of Applicant to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: applicant deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
